#include <iostream>
#include <cmath>
using namespace std;

// Temat: Tablice.    
/*
Tablica – kontener uporządkowanych danych takiego samego typu,
        w którym poszczególne elementy dostępne są za pomocą kluczy (indeksu):
        0, 1, 2, 3,...
*/

 main(){
    
    // 1. definicja (tworzenie) tablicy z inicjalizacją (podanie wartości)
    // tablica na liczby całkowite (short, int, long long)
    
    // indeksy/klucze 0  1  2  3   4  5
    int tablica1[] = {6, 3, 7, 0, -3, 4};
    
    /*
        int - typ tablicy (tylko liczby całkowite)
        tablica1 - nazwa tablicy (może być abc)
        [] - operator tablicowy - charakterystyczny dla tablicy
        ={ ... } - przypisanie wartości elementom tablicy       
    */
    
    // tablica z liczbami rzeczywistymi (float, double, long double)
    // (0.78, -45.9, 0, 8, -99.999)
    
    float tablica2[] = {0.78, -45.9, 0, 8, -99.999};
    
    // tablica z wartościami typu bool  (true, false, 0, 1 )   
    /*
    0 - oznacza nieprawdę - false
    wartość liczbowa inna niż 0 oznacza prawdę true
    */
    
    bool tablica3[] = {true, false, 0, 1};
    
    // tablica na znaki (typ char)  ('a', '$', 'P', 'L')
    char tablica4[] = { 'a', '$', 'P', 'L' };
    
    cout << tablica4 << endl; // wyświetlanie tablicy znaków 
    
    // tablica na napisy (typ string)  ("napis 1", "napis 2", "napis 3")
    string tablica5[] = {"napis 1", "napis 2", "napis 3"};    
    
	// 2. Odczytywanie/dostęp do elementów tablicy   
        
    cout << tablica1[0] << endl; // I element tablicy 
    cout << tablica1[1] << endl; // 
    cout << tablica1[2] << endl; // 
    cout << tablica1[3] << endl; // 
    cout << tablica1[4] << endl; // 
    cout << tablica1[5] << endl; // ostatni element
    
    
	// wyświetl elementy tablic tablica2[], ...  
	 
    cout << "elementy tablicy tablica2[]: " << endl;
    cout << tablica2[0] << endl;
    cout << tablica2[1] << endl;
    cout << tablica2[2] << endl;
    cout << tablica2[3] << endl;
    cout << tablica2[4] << endl;
    
	cout << "elementy tablicy tablica3[]: " << endl;
    cout << tablica3[0] << endl;
    cout << tablica3[1] << endl;
    
    cout << "elementy tablicy tablica4[]: " << endl;
    cout << tablica4[0] << endl;
    cout << tablica4[1] << endl;
    cout << tablica4[2] << endl;
    cout << tablica4[3] << endl;
    
    cout << "elementy tablicy tablica5[]: " << endl;    
	cout << tablica5[0] << endl;
	cout << tablica5[1] << endl;
	cout << tablica5[2] << endl;

    // 3. Definicja tablicy bez inicjalizacji (bez podania wartości)
    
    string imiona[5];
    
    // inicjalizacja elementów tablicy
    imiona[0] = "Henryk";
    imiona[1] = "Genryk";
    imiona[2] = "Marek";
    imiona[3] = "Kamil";
    imiona[4] = "Vadil";
    
    cout << "Imiona to: " << imiona[0] << ", " << imiona[1] << ", " << imiona[2] << ", " << imiona[3] << ", " << imiona[4] << "." << endl;
    
	int liczba[1000];
	// Jakie wartości tam są, gdy tablicy nie zainicjalizujemy?
	cout << liczba[500] << ", " << liczba[999] << endl;
	// Odpowiedź: tam są śmieci - pozostałości danych po poprzednich programach
	
	// 4. Współpraca tablic z pętlami
cout << "Wyswietlanie zawartosci tablica1[] za pomoca petli: " << endl;
	for ( int i=0; i<6; i=i+1){
		cout << tablica1[i] << ", ";
	}
	cout << endl;
	
cout << "Wyswietlanie zawartosci tablica2[] za pomoca petli: " << endl;
	for ( int i=0; i<5; i=i+1){
		cout << tablica2[i] << ", ";
	}
	cout << endl;
	
cout << "Wyswietlanie zawartosci tablica4[] za pomoca petli: " << endl;
	for ( int i=0; i<4; i=i+1){
		cout << tablica3[i] << ", ";
	}
	cout << endl;
	
cout << "Wyswietlanie zawartosci tablica5[] za pomoca petli: " << endl;
	for ( int i=0; i<3; i=i+1){
		cout << tablica3[i] << ", ";
	}
	
cout << "Wyswietlanie zawartosci imiona[] za pomoca petli: " << endl;
	for ( int i=0; i<5; i=i+1){
		cout << imiona[i] << ", ";
	}
	cout << endl;
	system("pause");
    
}
